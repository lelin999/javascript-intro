// 7D. Write a function called each that takes in an array and a callback. For more information on callbacks, look for callback under Functional Programming.
// Each does not return anything. It applies the callback on three different parameters, each element of the array, each index of the array, and the array as a whole.
//
/* Example:
const functionNumbers = [1, 2, 3, 4, 5];
each(functionNumbers, (element, index, array) => {
  console.log(element, index, array);
});

Outputs:
1 0 [1, 2, 3, 4, 5]
2 1 [1, 2, 3, 4, 5]
3 2 [1, 2, 3, 4, 5]
4 3 [1, 2, 3, 4, 5]
5 4 [1, 2, 3, 4, 5]
*/
//   CODE GOES HERE   // //   CODE GOES HERE   // //   CODE GOES HERE   //


/* # Coding Challenges 2

Last time you built `each`, a function that takes in an array and another function,
iterates through the array, and invokes the passed in function while passing in the current element being iterated through.


## Code Snippets
Here's how `each` looks:


var each = function(array, callback) {
    for (var i = 0; i < array.length; i++) {
        callback(array[i], i, array);
    }
}
```

`each` actually fires the callback using three separate arguments:
+ The current element
+ The current index value
+ The array as a whole


**Let's also create a couple of arrays:**

`var colors = ['white', 'blue', 'black', 'red', 'green'];`

**Now, some helper functions**

```
var print = function(string) {
    return 'Your result is: ' + string;
}
```

```
var printWithExclamationMarks = function(string) {
    return string + '!!!'
}
```


## Map

Last time, we used `each` to call `printWithExclamationMarks` on all of the elements within an array.

This time, I want to use `printWithExclamationMarks` to modify all the elements within an array,
save them to a new array in the exact same order, and return it.

We're going to build something called `map` to accomplish this. `Map` is pretty similar to each --
it takes in an array and a callback as its only arguments, it iterates through the array,
but it saves the results of whatever gets returned by passing the current element to the callback into a new array and returns it at the end.

For example:

`map(colors, printWithExclamationMarks)` should return `['white!!!', 'blue!!!', 'black!!!', 'red!!!', 'green!!!']`

You should write this in any way you can, but see if you can keep it DRY --
you already wrote each and know what it does, how can you use what you've already written to prevent yourself from writing the same things again?





## Pluck

Let's build on what we've done so far. Now let's say that I have the following array:

```
var creatures = [
 {name: 'Nissa, Vastwood Seer', cost: '2G', cmc: 3, rarity: 'Mythic'},
 {name: 'Jace, Vryns Prodigy', cost: '1U', cmc: 2, rarity: 'Mythic'},
 {name: 'Den Protector', cost: '1G', cmc: 2, rarity: 'Rare'},
 {name: 'Qasali Pridemage', cost: 'WG', cmc: 2, rarity: 'Uncommon'},
 {name: 'Wild Nacatl', cost: 'G', cmc: 1, rarity: 'common'}]
```

I want to build a function called `pluck`. `Pluck` does the following:
It takes in an array and a property type as its arguments, and returns an array containing only the value of the properties asked for.

If I were to run `pluck(creatures, 'cost')`, I would receive `['2G', '1U', '1G', 'G']` as my result.

Again, write this in any way you can, but see if you can keep it DRY -- is there anything above you can use to make it so you don't repeat yourself?




## Reduce

This is an operation that's really useful with large sets of data. Let's say that we have the following:

`var cmc = [1, 2, 5, 6, 3, 4]`

And for some reason, we'd like to return the entire sum of the array.

```
var sum = function(a, b) {
    return a + b;
}
```

Or, maybe we'd like to return the product of the entire array.

```
var product = function(a, b) {
    return a * b;
}
```

Or we have an array of all colors:

`var colors = ['white', 'blue', 'black', 'red', 'green']`

And we'd like to combine them into a string:

```
var concat = function(a, b) {
    return a + ' ' + b;
}
```

I'd like one single function that can handle all of this logic, named `reduce`.
`Reduce` does just that -- it accepts an array and a callback, passing in elements from the array to the callback,
and reduces it to one final item, and returns it. Reduce also takes in an optional starting point --
I can give it a default value to work off of. If I don't have one, it should just grab the first thing in the array.

For example:

`reduce(colors, concat)` would give me `'white blue black red green'`.

`reduce(colors, concat, 'there are: '` would give me `there are: white blue black red green'`

`reduce(cmc, sum)` would give me `21`

`reduce(cmc, sum, 7)` would give me `28`






## Map-Reduce

MapReduce is extremely common for processing and generating large sets of data.
Imagine you're Uber, you've downloaded the transactional data of all the rides given in San Francisco for the entire month,
which contains an array of all the fares paid by riders. You'd like to a) subtract the drivers' commission and b)
combine the amount together, to get a better sence of Uber's operating revenue in the city for the month.

Implement MapReduce. It's a function that's going to take in an array and two callbacks.
It's going to do two things -- it's going to map over the entire array using the first callback,
and then the mapped array will be reduced using the second callback.
